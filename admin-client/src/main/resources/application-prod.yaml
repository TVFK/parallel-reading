server:
  port: 8083
  forward-headers-strategy: framework
services:
  books:
    uri: http://book-service:8080
    registration-id: keycloak
spring:
  application:
    name: admin-client
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  security:
    oauth2:
      client:
        provider:
          keycloak:
            authorization-uri: ${BASE_URL}/auth/realms/boolkus/protocol/openid-connect/auth
            token-uri: http://keycloak:8080/realms/boolkus/protocol/openid-connect/token
            user-info-uri: http://keycloak:8080/realms/boolkus/protocol/openid-connect/userinfo
            jwk-set-uri: http://keycloak:8080/realms/boolkus/protocol/openid-connect/certs
            user-name-attribute: preferred_username
        registration:
          keycloak:
            client-id: admin-app
            client-secret: drHE0eBoRAENaroK59E993VqfSp9pham
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
            scope:
              - openid
              - microprofile-jwt
              - view_books
              - edit_books
      resourceserver:
        jwt:
          issuer-uri: ${BASE_URL}/auth/realms/boolkus
          jwk-set-uri: http://keycloak:8080/realms/boolkus/protocol/openid-connect/certs
  kafka:
    bootstrap-servers: kafka:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

minio:
  url: http://minio:9000
  access-key: ${MINIO_ROOT_USER}
  secret-key: ${MINIO_ROOT_PASSWORD}
  covers-bucket: covers
  texts-bucket: texts

management:
  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - prometheus
  endpoint:
    health:
      show-details: always
  zipkin:
    tracing:
      endpoint: http://tempo:9411/api/v2/spans
  tracing:
    sampling:
      probability: 0.3