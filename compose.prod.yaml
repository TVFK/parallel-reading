name: parallel-reading

services:
  # Infrastructure
  keycloak-db:
    image: postgres:16
    container_name: keycloak-db
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak -d keycloak" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak
    environment:
      # --- Database Configuration ---
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_SCHEMA: public

      # --- Administrator Credentials ---
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_LOGIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      # proxy and hostname config
      KC_FEATURES: hostname:v2
      KC_PROXY_HEADERS: forwarded
      KC_HOSTNAME: ${BASE_URL}/auth
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HTTPS_ENABLED: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false

      # logging
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_HTTP_MANAGEMENT_PORT: 9000
    volumes:
      - './config/keycloak/import/prod:/opt/keycloak/data/import'
      - './config/keycloak/themes:/opt/keycloak/themes'
    command: start --import-realm
    networks:
      - boolkus-net
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nhost: localhost:9000\r\nConnection: close\r\n\r\n' >&3; cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  books-db:
    image: postgres:16
    container_name: books-db
    environment:
      POSTGRES_DB: books-db
      POSTGRES_USER: username
      POSTGRES_PASSWORD: ${BOOKS_DB_PASSWORD}
    volumes:
      - books_db_data:/var/lib/postgresql/data
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username -d books-db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  dictionary-db:
    image: postgres:16
    container_name: dictionary-db
    environment:
      POSTGRES_DB: dictionary-db
      POSTGRES_USER: username
      POSTGRES_PASSWORD: ${DICTIONARY_DB_PASSWORD}
    volumes:
      - dictionary_db_data:/var/lib/postgresql/data
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username -d dictionary-db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  books-service-cache:
    image: redis:latest
    container_name: books-service-cache
    command: redis-server --requirepass ${BOOKS_SERVICE_CACHE_PASSWORD}
    environment:
      REDIS_PASSWORD: ${BOOKS_SERVICE_CACHE_PASSWORD}
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${BOOKS_SERVICE_CACHE_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  translation-service-cache:
    image: redis:latest
    container_name: translation-service-cache
    command: redis-server --requirepass ${TRANSLATION_SERVICE_CACHE_PASSWORD}
    environment:
      REDIS_PASSWORD: ${TRANSLATION_SERVICE_CACHE_PASSWORD}
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${TRANSLATION_SERVICE_CACHE_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  nginx:
    container_name: nginx
    build:
      context: ./config/nginx/prod
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - '/etc/letsencrypt/live/${DOMAIN}/fullchain.pem:/etc/nginx/ssl/fullchain.pem'
      - '/etc/letsencrypt/live/${DOMAIN}/privkey.pem:/etc/nginx/ssl/privkey.pem:ro'
    networks:
      - boolkus-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    depends_on:
      keycloak:
        condition: service_healthy
      minio:
        condition: service_healthy
      book-service:
        condition: service_healthy
      admin-client:
        condition: service_healthy
      translation-service:
        condition: service_healthy
      dictionary-service:
        condition: service_healthy
      grafana:
        condition: service_healthy

  victoria-metrics:
    image: victoriametrics/victoria-metrics:v1.93.12
    container_name: victoria-metrics
    volumes:
      - './config/victoria-metrics/promscrape.yaml:/promscrape.yaml'
      - 'victoria_metrics_data:/storage'
    command:
      - '--promscrape.config=/promscrape.yaml'
      - '--storageDataPath=/storage'
    networks:
      - boolkus-net
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8428/health | grep -q 'OK' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: -config.file=/etc/tempo.yaml
    volumes:
      - './config/tempo/tempo.yaml:/etc/tempo.yaml'
      - 'tempo_data:/var/tempo'
    networks:
      - boolkus-net
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3200/status/version || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  loki:
    container_name: loki
    image: grafana/loki:2.9.4
    volumes:
      - 'loki_data:/loki  '
    networks:
      - boolkus-net
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3100/loki/api/v1/status/buildinfo || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:10.2.4
    container_name: grafana
    volumes:
      - 'grafana_data:/var/lib/grafana'
      - './config/grafana/provisioning:/etc/grafana/provisioning'
    user: "1000:1000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=${BASE_URL}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - boolkus-net
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      victoria-metrics:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy

  # Services
  book-service:
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: book-service/target/*-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BASE_URL: ${BASE_URL}
      BOOKS_DB_PASSWORD: ${BOOKS_DB_PASSWORD}
      BOOKS_SERVICE_CACHE_PASSWORD: ${BOOKS_SERVICE_CACHE_PASSWORD}
    networks:
      - boolkus-net
    depends_on:
      books-db:
        condition: service_healthy
      books-service-cache:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  book-upload-service:
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: book-upload-service/target/*-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BASE_URL: ${BASE_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - boolkus-net
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  dictionary-service:
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: dictionary-service/target/*-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BASE_URL: ${BASE_URL}
      DICTIONARY_DB_PASSWORD: ${DICTIONARY_DB_PASSWORD}
    networks:
      - boolkus-net
    depends_on:
      dictionary-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  translation-service:
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: translation-service/target/*-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BASE_URL: ${BASE_URL}
      YANDEX_DICT_API_KEY: ${YANDEX_DICT_API_KEY}
      TRANSLATION_SERVICE_CACHE_PASSWORD: ${TRANSLATION_SERVICE_CACHE_PASSWORD}
    networks:
      - boolkus-net
    depends_on:
      translation-service-cache:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  admin-client:
    restart: unless-stopped
    build:
      dockerfile: Dockerfile
      args:
        JAR_FILE: admin-client/target/*-exec.jar
    environment:
      SPRING_PROFILES_ACTIVE: prod
      BASE_URL: ${BASE_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - boolkus-net
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

volumes:
  loki_data:
  minio_data:
  kafka_data:
  tempo_data:
  grafana_data:
  books_db_data:
  keycloak_db_data:
  dictionary_db_data:
  victoria_metrics_data:

networks:
  boolkus-net:
    driver: bridge